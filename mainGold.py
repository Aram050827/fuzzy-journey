
import os
import sqlite3
import logging
import asyncio
import random
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ‘ø’°÷Ä’£’°’æ’∏÷Ä’•’¨ logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‘ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä
BOT_TOKEN = os.getenv("BOT_TOKEN", "7325788973:AAFX0CIPGLUVIWR10RD40Qp2IoWYFuboD2E")  # ’ì’∏’≠’°÷Ä’´’∂’•÷Ñ ’∂’∏÷Ä ’ø’∏’Ø’•’∂’∏’æ
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://fuzzy-journey.onrender.com")  # ’ì’∏’≠’°÷Ä’´’∂’•÷Ñ ngrok ’Ø’°’¥ Render URL-’∏’æ
PORT = int(os.getenv("PORT", 10000))

# ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’´ ’Ω’Ø’¶’¢’∂’°’æ’∏÷Ä’∏÷Ç’¥
def init_db():
    conn = sqlite3.connect('lotto.db')  # Render.com-’∏÷Ç’¥ ÷É’∏’≠’•÷Ñ '/data/lotto.db'-’´
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        balance INTEGER DEFAULT 0
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS games (
        game_id INTEGER PRIMARY KEY AUTOINCREMENT,
        creator_id INTEGER,
        is_private INTEGER,
        status TEXT,
        start_time REAL
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS game_players (
        game_id INTEGER,
        user_id INTEGER,
        card TEXT,
        PRIMARY KEY (game_id, user_id)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS waiting_list (
        game_id INTEGER,
        user_id INTEGER,
        PRIMARY KEY (game_id, user_id)
    )''')
    conn.commit()
    conn.close()

# ’ï’£’ø’°’ø’´÷Ä’∏’ª ’Ω’ø’•’≤’Æ’∏÷Ç’¥
def create_user(user_id, first_name):
    conn = sqlite3.connect('lotto.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, first_name) VALUES (?, ?)", (user_id, first_name))
    conn.commit()
    conn.close()

# ’î’°÷Ä’ø’´ ’£’•’∂’•÷Ä’°÷Å’∏÷Ç’¥
def generate_card():
    numbers = random.sample(range(1, 91), 15)
    return ','.join(map(str, numbers))

# ‘Ω’°’≤’´ ’Ω’ø’•’≤’Æ’∏÷Ç’¥
def create_game(creator_id, is_private):
    conn = sqlite3.connect('lotto.db')
    c = conn.cursor()
    c.execute("INSERT INTO games (creator_id, is_private, status, start_time) VALUES (?, ?, ?, ?)",
              (creator_id, is_private, 'waiting', time.time()))
    game_id = c.lastrowid
    conn.commit()
    conn.close()
    return game_id

# ‘Ω’°’≤’°÷Å’∏’≤’´ ’°’æ’•’¨’°÷Å’∏÷Ç’¥
def add_player(game_id, user_id, card):
    conn = sqlite3.connect('lotto.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO game_players (game_id, user_id, card) VALUES (?, ?, ?)",
              (game_id, user_id, card))
    conn.commit()
    conn.close()

# Start ’∞÷Ä’°’¥’°’∂
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    create_user(user.id, user.first_name)
    
    keyboard = [
        [InlineKeyboardButton("üéÆ ‘Ω’°’≤’°’¨", callback_data='play')],
        [InlineKeyboardButton("üéâ ‘Ω’°’≤’°’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’•’ø", callback_data='play_friends')],
        [InlineKeyboardButton("‚è≥ ’ç’∫’°’Ω’•’¨", callback_data='wait')],
        [InlineKeyboardButton("‚ùì ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂", callback_data='help')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"‘≤’°÷Ä÷á, {user.first_name}!\n‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø ’≠’°’≤÷â ‘∏’∂’ø÷Ä’•÷Ñ ’ø’°÷Ä’¢’•÷Ä’°’Ø’ù",
        reply_markup=reply_markup
    )

# ’ï’£’∂’∏÷Ç’©’µ’°’∂ ’∞÷Ä’°’¥’°’∂
async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìú ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂:\n"
        "üéÆ ‘Ω’°’≤’°’¨ ‚Äî ’Ñ’´’°’∂’°’¨ ’∞’°’∂÷Ä’°’µ’´’∂ ’≠’°’≤’´’∂ (60 ’æ÷Ä’Ø ’Ω’∫’°’Ω’∏÷Ç’¥, 2+ ’≠’°’≤’°÷Å’∏’≤)\n"
        "üéâ ‘Ω’°’≤’°’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’•’ø ‚Äî ’ç’ø’•’≤’Æ’•’¨ ’¥’°’Ω’∂’°’æ’∏÷Ä ’≠’°’≤ (10 ’æ÷Ä’Ø ’Ω’∫’°’Ω’∏÷Ç’¥)\n"
        "‚è≥ ’ç’∫’°’Ω’•’¨ ‚Äî ‘æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥ ’Ω’ø’°’∂’°’¨ ’≠’°’≤’´ ’°’æ’°÷Ä’ø’´ ’¥’°’Ω’´’∂\n"
        "‚ùì ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂ ‚Äî ’ë’∏÷Ç’µ÷Å ’ø’°’¨ ’°’µ’Ω ’ø’•÷Ñ’Ω’ø’®"
    )

# ‘Ω’°’≤’´ ’°’æ’°÷Ä’ø
async def end_game(context: ContextTypes.DEFAULT_TYPE, game_id, winner_id):
    conn = sqlite3.connect('lotto.db')
    c = conn.cursor()
    
    # ’ç’ø’°’∂’°’¨ ’≠’°’≤’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®
    c.execute("SELECT user_id, card FROM game_players WHERE game_id = ?", (game_id,))
    players = c.fetchall()
    
    # ’ç’ø’°’∂’°’¨ ’∞’°’≤’©’∏’≤’´ ’°’∂’∏÷Ç’∂’®
    c.execute("SELECT first_name FROM users WHERE user_id = ?", (winner_id,))
    winner_name = c.fetchone()[0]
    
    # ’ä’°’ø÷Ä’°’Ω’ø’•’¨ ÷Ñ’°÷Ä’ø’•÷Ä’´ ’ø’•÷Ñ’Ω’ø
    card_text = "\n".join([f"üé¥ {context.bot.get_user(p[0]).first_name}: {p[1]}" for p in players])
    
    # ‘æ’°’∂’∏÷Ç÷Å’•’¨ ’¢’∏’¨’∏÷Ä ’≠’°’≤’°÷Å’∏’≤’∂’•÷Ä’´’∂
    for player_id, _ in players:
        try:
            if int(player_id) == winner_id:
                await context.bot.send_message(
                    player_id,
                    f"üéâ ’á’∂’∏÷Ä’∞’°’æ’∏÷Ä’∏÷Ç’¥ ’•’∂÷Ñ, {winner_name}÷â ‘¥’∏÷Ç÷Ñ ’∞’°’≤’©’•÷Å’´÷Ñ÷â\n{card_text}\n"
                    "üìú ‘≤’∏’¨’∏÷Ä ÷Ñ’°÷Ä’ø’•÷Ä’® ’ª’∂’ª’æ’•÷Å’´’∂÷â ’ç’ø’•’≤’Æ’•’û’¨ ’∂’∏÷Ä ’≠’°’≤÷â"
                )
            else:
                await context.bot.send_message(
                    player_id,
                    f"üèÅ ‘Ω’°’≤’∂ ’°’æ’°÷Ä’ø’æ’•÷Å÷â ’Ä’°’≤’©’∏’≤’ù {winner_name}\n{card_text}\n"
                    "üìú ‘≤’∏’¨’∏÷Ä ÷Ñ’°÷Ä’ø’•÷Ä’® ’ª’∂’ª’æ’•÷Å’´’∂÷â ’ç’ø’•’≤’Æ’•’û’¨ ’∂’∏÷Ä ’≠’°’≤÷â"
                )
        except Exception as e:
            logger.error(f"’ç’≠’°’¨ ’≠’°’≤’°÷Å’∏’≤ {player_id}-’´’∂ ’Æ’°’∂’∏÷Ç÷Å’•’¨’´’Ω: {e}")
    
    # ‘æ’°’∂’∏÷Ç÷Å’•’¨ ’Ω’∫’°’Ω’¥’°’∂ ÷Å’∏÷Ç÷Å’°’Ø’∏÷Ç’¥ ’£’ø’∂’æ’∏’≤’∂’•÷Ä’´’∂
    c.execute("SELECT user_id FROM waiting_list WHERE game_id = ?", (game_id,))
    waiting_users = c.fetchall()
    for user_id in waiting_users:
        try:
            await context.bot.send_message(
                user_id[0],
                f"üèÅ ‘Ω’°’≤ #{game_id} ’°’æ’°÷Ä’ø’æ’•÷Å÷â ’Ä’°’≤’©’∏’≤’ù {winner_name}\n"
                "üéÆ ’ç’ø’•’≤’Æ’•’û’¨ ’∂’∏÷Ä ’≠’°’≤÷â"
            )
        except Exception as e:
            logger.error(f"’ç’≠’°’¨ ’Ω’∫’°’Ω’∏’≤ {user_id[0]}-’´’∂ ’Æ’°’∂’∏÷Ç÷Å’•’¨’´’Ω: {e}")
    
    # ’ã’∂’ª’•’¨ ’≠’°’≤’® ÷á ’Ω’∫’°’Ω’¥’°’∂ ÷Å’∏÷Ç÷Å’°’Ø’®
    c.execute("DELETE FROM game_players WHERE game_id = ?", (game_id,))
    c.execute("DELETE FROM waiting_list WHERE game_id = ?", (game_id,))
    c.execute("DELETE FROM games WHERE game_id = ?", (game_id,))
    conn.commit()
    conn.close()

# ‘ø’∏’≥’°’Ø’∂’•÷Ä’´ ’¥’∑’°’Ø’∏÷Ç’¥
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    if query.data == 'play':
        conn = sqlite3.connect('lotto.db')
        c = conn.cursor()
        c.execute("SELECT game_id FROM games WHERE status = 'waiting' AND is_private = 0")
        game = c.fetchone()
        
        if game:
            game_id = game[0]
            card = generate_card()
            add_player(game_id, user.id, card)
            await query.message.reply_text(f"‚úÖ ‘¥’∏÷Ç÷Ñ ’¥’´’°÷Å’°÷Ñ ’≠’°’≤ #{game_id}-’´’∂÷â ’Å’•÷Ä ÷Ñ’°÷Ä’ø’®’ù {card}")
        else:
            game_id = create_game(user.id, is_private=0)
            card = generate_card()
            add_player(game_id, user.id, card)
            await query.message.reply_text(f"üé≤ ’Ü’∏÷Ä ’≠’°’≤ #{game_id} ’Ω’ø’•’≤’Æ’æ’•÷Å÷â ’Å’•÷Ä ÷Ñ’°÷Ä’ø’®’ù {card}")
            context.job_queue.run_once(start_public_game, 60, data={'game_id': game_id}, name=f"start_game_{game_id}")
        
        conn.close()
    
    elif query.data == 'play_friends':
        game_id = create_game(user.id, is_private=1)
        card = generate_card()
        add_player(game_id, user.id, card)
        
        keyboard = [[InlineKeyboardButton("üöÄ ’ç’Ø’Ω’•’¨ ’≠’°’≤’®", callback_data=f'start_private_{game_id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            f"üéâ ’Ñ’°’Ω’∂’°’æ’∏÷Ä ’≠’°’≤ #{game_id} ’Ω’ø’•’≤’Æ’æ’•÷Å÷â ’Å’•÷Ä ÷Ñ’°÷Ä’ø’®’ù {card}\n"
            "’Ä÷Ä’°’æ’´÷Ä’•÷Ñ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´’∂ ’Ω’ø’∏÷Ä÷á ’∂’∑’æ’°’Æ ’∞’≤’∏÷Ç’¥’∏’æ÷â",
            reply_markup=reply_markup
        )
        await query.message.reply_text(f"üîó ’Ä÷Ä’°’æ’•÷Ä’´ ’∞’≤’∏÷Ç’¥: https://t.me/{context.bot.username}?start=game_{game_id}")
        context.job_queue.run_once(start_private_game, 10, data={'game_id': game_id}, name=f"start_game_{game_id}")
    
    elif query.data.startswith('start_private_'):
        game_id = int(query.data.split('_')[-1])
        await start_private_game(context, {'game_id': game_id})
    
    elif query.data == 'wait':
        conn = sqlite3.connect('lotto.db')
        c = conn.cursor()
        c.execute("SELECT game_id FROM games WHERE status = 'waiting' AND is_private = 0")
        game = c.fetchone()
        
        if game:
            game_id = game[0]
            c.execute("INSERT OR IGNORE INTO waiting_list (game_id, user_id) VALUES (?, ?)", (game_id, user.id))
            conn.commit()
            await query.message.reply_text(f"‚è≥ ‘¥’∏÷Ç÷Ñ ’°’æ’•’¨’°÷Å’æ’•÷Å’´÷Ñ ’≠’°’≤ #{game_id}-’´ ’Ω’∫’°’Ω’¥’°’∂ ÷Å’∏÷Ç÷Å’°’Ø’∏÷Ç’¥÷â")
        else:
            await query.message.reply_text("‚ùå ’Ü’•÷Ä’Ø’°’µ’∏÷Ç’¥’Ω ’∞’°’∂÷Ä’°’µ’´’∂ ’≠’°’≤’•÷Ä ’π’Ø’°’∂÷â ’ç’ø’•’≤’Æ’•’û’¨ ’∂’∏÷Ä ’≠’°’≤÷â")
        
        conn.close()
    
    elif query.data == 'help':
        await query.message.reply_text(
            "üìú ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂:\n"
            "üéÆ ‘Ω’°’≤’°’¨ ‚Äî ’Ñ’´’°’∂’°’¨ ’∞’°’∂÷Ä’°’µ’´’∂ ’≠’°’≤’´’∂\n"
            "üéâ ‘Ω’°’≤’°’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’•’ø ‚Äî ’ç’ø’•’≤’Æ’•’¨ ’¥’°’Ω’∂’°’æ’∏÷Ä ’≠’°’≤\n"
            "‚è≥ ’ç’∫’°’Ω’•’¨ ‚Äî ‘æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥ ’Ω’ø’°’∂’°’¨ ’≠’°’≤’´ ’°’æ’°÷Ä’ø’´ ’¥’°’Ω’´’∂\n"
            "‚ùì ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂ ‚Äî ’ë’∏÷Ç’µ÷Å ’ø’°’¨ ’°’µ’Ω ’ø’•÷Ñ’Ω’ø’®"
        )

# ’Ä’°’∂÷Ä’°’µ’´’∂ ’≠’°’≤’´ ’¥’•’Ø’∂’°÷Ä’Ø
async def start_public_game(context: ContextTypes.DEFAULT_TYPE, job):
    game_id = job.data['game_id']
    conn = sqlite3.connect('lotto.db')
    c = conn.cursor()
    
    c.execute("SELECT user_id FROM game_players WHERE game_id = ?", (game_id,))
    players = c.fetchall()
    
    if len(players) < 2:
        for player_id in players:
            try:
                await context.bot.send_message(
                    player_id[0],
                    f"‚ùå ‘Ω’°’≤ #{game_id} ’π’Ω’Ø’Ω’æ’•÷Å, ÷Ñ’°’∂’´ ’∏÷Ä ’¢’°’æ’°÷Ä’°÷Ä ’≠’°’≤’°÷Å’∏’≤’∂’•÷Ä ’π’Ø’°’∂÷â"
                )
            except Exception as e:
                logger.error(f"’ç’≠’°’¨ ’≠’°’≤’°÷Å’∏’≤ {player_id[0]}-’´’∂ ’Æ’°’∂’∏÷Ç÷Å’•’¨’´’Ω: {e}")
        
        c.execute("DELETE FROM games WHERE game_id = ?", (game_id,))
        c.execute("DELETE FROM game_players WHERE game_id = ?", (game_id,))
        conn.commit()
        conn.close()
        return
    
    c.execute("UPDATE games SET status = 'started' WHERE game_id = ?", (game_id,))
    conn.commit()
    
    await context.bot.send_message(
        players[0][0],
        f"üé≤ ‘Ω’°’≤ #{game_id} ’Ω’Ø’Ω’æ’•÷Å÷â {len(players)} ’≠’°’≤’°÷Å’∏’≤÷â"
    )
    
    # ‘Ω’°’≤’´ ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ (÷Ö÷Ä’´’∂’°’Ø’ù ’©’æ’•÷Ä’´ ’∞’°’∂’∏÷Ç’¥)
    numbers = random.sample(range(1, 91), 5)  # ’ï÷Ä’´’∂’°’Ø’ù 5 ’©’´’æ
    for num in numbers:
        await context.bot.send_message(
            players[0][0],
            f"üé∞ ’Ä’°’∂’æ’°’Æ ’©’´’æ’ù {num}"
        )
        await asyncio.sleep(3)
    
    # ’ï÷Ä’´’∂’°’Ø’ù ’°’º’°’ª’´’∂ ’≠’°’≤’°÷Å’∏’≤’® ’∞’°’≤’©’∏÷Ç’¥ ’ß
    winner_id = players[0][0]
    await end_game(context, game_id, winner_id)
    
    conn.close()

# ’Ñ’°’Ω’∂’°’æ’∏÷Ä ’≠’°’≤’´ ’¥’•’Ø’∂’°÷Ä’Ø
async def start_private_game(context: ContextTypes.DEFAULT_TYPE, job_or_data):
    game_id = job_or_data['game_id'] if isinstance(job_or_data, dict) else job_or_data.data['game_id']
    conn = sqlite3.connect('lotto.db')
    c = conn.cursor()
    
    c.execute("SELECT user_id FROM game_players WHERE game_id = ?", (game_id,))
    players = c.fetchall()
    
    if len(players) < 1:
        for player_id in players:
            try:
                await context.bot.send_message(
                    player_id[0],
                    f"‚ùå ‘Ω’°’≤ #{game_id} ’π’Ω’Ø’Ω’æ’•÷Å, ÷Ñ’°’∂’´ ’∏÷Ä ’≠’°’≤’°÷Å’∏’≤’∂’•÷Ä ’π’Ø’°’∂÷â"
                )
            except Exception as e:
                logger.error(f"’ç’≠’°’¨ ’≠’°’≤’°÷Å’∏’≤ {player_id[0]}-’´’∂ ’Æ’°’∂’∏÷Ç÷Å’•’¨’´’Ω: {e}")
        
        c.execute("DELETE FROM games WHERE game_id = ?", (game_id,))
        c.execute("DELETE FROM game_players WHERE game_id = ?", (game_id,))
        conn.commit()
        conn.close()
        return
    
    c.execute("UPDATE games SET status = 'started' WHERE game_id = ?", (game_id,))
    conn.commit()
    
    await context.bot.send_message(
        players[0][0],
        f"üé≤ ’Ñ’°’Ω’∂’°’æ’∏÷Ä ’≠’°’≤ #{game_id} ’Ω’Ø’Ω’æ’•÷Å÷â {len(players)} ’≠’°’≤’°÷Å’∏’≤÷â"
    )
    
    # ‘Ω’°’≤’´ ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂
    numbers = random.sample(range(1, 91), 5)
    for num in numbers:
        await context.bot.send_message(
            players[0][0],
            f"üé∞ ’Ä’°’∂’æ’°’Æ ’©’´’æ’ù {num}"
        )
        await asyncio.sleep(3)
    
    winner_id = players[0][0]
    await end_game(context, game_id, winner_id)
    
    conn.close()

# ’è’•÷Ñ’Ω’ø’°’µ’´’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’¥’∑’°’Ø’∏÷Ç’¥
async def handle_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.startswith('/start game_'):
        game_id = int(update.message.text.split('_')[-1])
        user = update.effective_user
        conn = sqlite3.connect('lotto.db')
        c = conn.cursor()
        
        c.execute("SELECT status, is_private FROM games WHERE game_id = ?", (game_id,))
        game = c.fetchone()
        
        if game and game[1] == 1 and game[0] == 'waiting':
            card = generate_card()
            add_player(game_id, user.id, card)
            await update.message.reply_text(f"‚úÖ ‘¥’∏÷Ç÷Ñ ’¥’´’°÷Å’°÷Ñ ’¥’°’Ω’∂’°’æ’∏÷Ä ’≠’°’≤ #{game_id}-’´’∂÷â ’Å’•÷Ä ÷Ñ’°÷Ä’ø’®’ù {card}")
        else:
            await update.message.reply_text("‚ùå ‘Ω’°’≤’® ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’π’∏÷Ç’∂’´ ’Ø’°’¥ ’°’æ’°÷Ä’ø’æ’•’¨ ’ß÷â")
        
        conn.close()
    else:
        await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ ’Ø’∏’≥’°’Ø’∂’•÷Ä’® ’Ø’°’¥ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä’®÷â")

# ’Ä’´’¥’∂’°’Ø’°’∂ ÷Ü’∏÷Ç’∂’Ø÷Å’´’°
async def main():
    # ’ç’Ø’¶’¢’∂’°’æ’∏÷Ä’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’∂
    init_db()
    
    # ’ç’ø’•’≤’Æ’•’¨ ’¢’∏’ø’´ application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ’ã’∂’ª’•’¨ ’∞’´’∂ webhook-’® ÷á ’Ø’°÷Ä’£’°’æ’∏÷Ä’•’¨ ’∂’∏÷Ä’®
    try:
        await application.bot.delete_webhook(drop_pending_updates=True)
        logger.info("’Ä’´’∂ webhook ’ª’∂’ª’æ’°’Æ ’ß")
        await application.bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
        logger.info(f"Webhook ’Ø’°÷Ä’£’°’æ’∏÷Ä’æ’°’Æ ’ß’ù {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"Webhook-’´ ’Ø’°÷Ä’£’°’æ’∏÷Ä’¥’°’∂ ’Ω’≠’°’¨: {e}")
        return
    
    # ‘±’æ’•’¨’°÷Å’∂’•’¨ handler-’∂’•÷Ä
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_keyboard))
    
    # ‘≥’∏÷Ä’Æ’°÷Ä’Ø’•’¨ webhook
    try:
        await application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path="",
            webhook_url=WEBHOOK_URL,
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"Webhook-’´ ’£’∏÷Ä’Æ’°÷Ä’Ø’¥’°’∂ ’Ω’≠’°’¨: {e}")
    finally:
        # ’Ä’°’¥’∏’¶’æ’•’¨, ’∏÷Ä application-’® ’≥’´’∑’ø ÷É’°’Ø’æ’∏÷Ç’¥ ’ß
        await application.stop()
        await application.updater.stop()
        logger.info("‘≤’∏’ø’® ’Ø’°’∂’£’∂’•÷Å’æ’°’Æ ’ß")

if __name__ == '__main__':
    try:
        # ’Ä’°’¥’∏’¶’æ’•’¨, ’∏÷Ä event loop-’® ’≥’´’∑’ø ’ß ’Ø’°÷Ä’£’°’æ’∏÷Ä’æ’°’Æ
        loop = asyncio.get_event_loop()
        if loop.is_closed():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("‘≤’∏’ø’® ’Ø’°’∂’£’∂’•÷Å’æ’°’Æ ’ß ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’Ø’∏’≤’¥’´÷Å")
    except Exception as e:
        logger.error(f"’Ä’´’¥’∂’°’Ø’°’∂ ’Ω’≠’°’¨: {e}")
    finally:
        # ’ì’°’Ø’•’¨ event loop-’®
        if not loop.is_closed():
            loop.run_until_complete(loop.shutdown_asyncgens())
            loop.close()
